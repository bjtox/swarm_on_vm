# AWS playbook
---
- hosts: local
  gather_facts: true
  # vars_files:
  #   - ../groups_vars/all.yml
  #   - ../groups_vars/aws.yml
  #   - ../groups_vars/vault.yml


  tasks:
    # - name: Generate Temporary key
    - name: Generate SSH keys
      command: ssh-keygen -b 2048 -t rsa -f {{ ssh_key_path }} -q -N ""
      args:
        creates: "{{ ssh_key_path }}"

    - name: Provisioning EC2 instances
      block:
      - name: Upload public key to AWS
        ec2_key:
          name: "{{ key_name }}"
          key_material: "{{ lookup('file', '{{ ssh_key_path }}.pub') }}"
          region: "{{ region }}"
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"

      - name: Create security group for master
        ec2_group:
          name: "{{ sec_group_master }}"
          description: "Sec group for app swarm_vm master"
          region: "{{ region }}"
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          vpc_id: "{{ vpc_id }}"

        register: result_sec_group_master

      - name: Create security group for workers
        ec2_group:
          name: "{{ sec_group_workers }}"
          description: "Sec group for app swarm_vm workers"
          region: "{{ region }}"
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          vpc_id: "{{ vpc_id }}"
          rules:
            - proto: all
              group_name: "{{ result_sec_group_master.group_name }}"
        register: result_sec_group_workers

      - name: Update security group for master
        ec2_group:
          name: "{{ sec_group_master }}"
          description: "Sec group for app swarm_vm master"
          region: "{{ region }}"
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          vpc_id: "{{ vpc_id }}"
          rules:
            - proto: tcp
              ports:
                - 22
                - 2376
              cidr_ip: "{{ inbound_cidr_ip }}"
              rule_desc: allow all on ssh port
            - proto: all
              group_name: "{{ result_sec_group_workers.group_name }}"
        register: result_sec_group_master

      - name: Provision swarm Master
        ec2:
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          key_name: "{{ key_name }}"
          group_id: "{{ result_sec_group_master.group_id }}"
          image: "{{ image }}"
          instance_type: t2.micro
          region: "{{ region }}"
          vpc_subnet_id: "{{ vpc_subnet_id }}"
          wait: yes
          count: 1
          assign_public_ip: yes
          instance_tags:
            Name: swarm_master
        register: swarm_master

      - name: Provision swarm Workers
        ec2:
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          key_name: "{{ key_name }}"
          group_id:
            - "{{ result_sec_group_workers.group_id }}"
            - "{{ result_sec_group_master.group_id }}"
          image: "{{ image }}"
          instance_type: t2.micro
          region: "{{ region }}"
          vpc_subnet_id: "{{ vpc_subnet_id_worker }}"
          wait: yes
          count: "{{ workers_count }}"
          assign_public_ip: yes
          volumes:
            - device_name: /dev/sda1
              volume_type: gp2
              volume_size: 50
              delete_on_termination: true
          instance_tags:
            Name: swarm_worker
        register: swarm_worker

      - name: Add created master in hosts
        add_host:
          name: "{{ item.public_ip }} swarm_labels=deploy"
          groups: docker_swarm_manager
        with_items: "{{ swarm_master.instances }}"

      - name: Add created workers in hosts
        add_host:
          name: "{{ item.public_ip }}"
          groups: docker_swarm_worker
        with_items: "{{ swarm_worker.instances }}"
